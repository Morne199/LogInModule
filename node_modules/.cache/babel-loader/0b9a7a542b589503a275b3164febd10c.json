{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zirmo\\\\Desktop\\\\React guide\\\\LogInModule\\\\src\\\\components\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport react, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/react.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n    if (storedUserLoggedInInformation === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n  };\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedin: isLoggedIn,\n      onLogout: loginHandler,\n      onLogin: loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/zirmo/Desktop/React guide/LogInModule/src/components/store/auth-context.js"],"names":["react","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","props","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","logoutHandler","loginHandler","setItem","isLoggedin","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACtCC,EAAAA,UAAU,EAAE,KAD0B;AAEtCC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAFoB;AAGtCC,EAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE;AAHM,CAApB,CAApB;AAMA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C,QAAM,CAACN,UAAD,EAAaO,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC;;AACA,QAAIF,6BAA6B,KAAK,GAAtC,EAA2C;AACzCD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMI,aAAa,GAAG,MAAM;AAC1BJ,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAFD;;AAIA,QAAMK,YAAY,GAAG,CAACT,KAAD,EAAQC,QAAR,KAAqB;AACxC;AACA;AACAK,IAAAA,YAAY,CAACI,OAAb,CAAqB,YAArB,EAAmC,GAAnC;AACAN,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GALD;;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLO,MAAAA,UAAU,EAAEd,UADP;AAELC,MAAAA,QAAQ,EAAEW,YAFL;AAGLV,MAAAA,OAAO,EAAEU;AAHJ,KADT;AAAA,cAOGN,KAAK,CAACS;AAPT;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA/BM;;GAAMV,mB;;KAAAA,mB;AAiCb,eAAeP,WAAf","sourcesContent":["import react, { useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = react.createContext({\r\n  isLoggedIn: false,\r\n  onLogout: () => {},\r\n  onLogin: (email, password) => {},\r\n});\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  useEffect(() => {\r\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\r\n    if (storedUserLoggedInInformation === \"1\") {\r\n      setIsLoggedIn(true);\r\n    }\r\n  }, []);\r\n\r\n  const logoutHandler = () => {\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  const loginHandler = (email, password) => {\r\n    // We should of course check email and password\r\n    // But it's just a dummy/ demo anyways\r\n    localStorage.setItem(\"isLoggedIn\", \"1\");\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isLoggedin: isLoggedIn,\r\n        onLogout: loginHandler,\r\n        onLogin: loginHandler,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"]},"metadata":{},"sourceType":"module"}